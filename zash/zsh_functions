# -------- PYTHON ENVIRONMENT MANAGEMENT (WOFI) --------

ENV_DIR="$HOME/env"

# Function to list environments and activate selected one
av() {
  if [[ ! -d "$ENV_DIR" ]]; then
    echo "‚ùå No environment directory found in $ENV_DIR"
    return 1
  fi

  local env_list selected_env
  env_list=("${(@f)$(ls "$ENV_DIR")}")
  [[ $#env_list -eq 0 ]] && echo "‚ùå No environments found." && return 1

  selected_env=$(printf "%s\n" "${env_list[@]}" | wofi --dmenu --prompt "Select environment:")
  if [[ -n "$selected_env" ]]; then
    source "$ENV_DIR/$selected_env/bin/activate"
    echo "‚úÖ Activated: $selected_env"
    export CURRENT_ENV="$selected_env"
  else
    echo "‚ö†Ô∏è No environment selected."
  fi
}

# Function to deactivate the current environment
dv() {
  if [[ -n "$CURRENT_ENV" ]]; then
    deactivate
    echo "üõë Deactivated: $CURRENT_ENV"
    unset CURRENT_ENV
  else
    echo "‚ùå No environment is currently active."
  fi
}

# Function to create a new environment
cenv() {
  local new_env
  new_env=$(wofi --dmenu --prompt "Enter new environment name:")
  if [[ -z "$new_env" ]]; then
    echo "‚ùå No name entered."
    return 1
  fi

  mkdir -p "$ENV_DIR"

  if [[ -d "$ENV_DIR/$new_env" ]]; then
    echo "‚ö†Ô∏è '$new_env' already exists."
    return 1
  fi

  python3 -m venv "$ENV_DIR/$new_env"
  echo "‚úÖ Created: $new_env"
}

# Function to delete an environment
denv() {
  if [[ ! -d "$ENV_DIR" ]]; then
    echo "‚ùå No environment directory."
    return 1
  fi

  local env_list selected_env confirm
  env_list=("${(@f)$(ls "$ENV_DIR")}")
  [[ $#env_list -eq 0 ]] && echo "‚ùå No environments to delete." && return 1

  selected_env=$(printf "%s\n" "${env_list[@]}" | wofi --dmenu --prompt "Select environment to delete:")
  [[ -z "$selected_env" ]] && echo "‚ö†Ô∏è No selection made." && return

  confirm=$(echo -e "Yes\nNo" | wofi --dmenu --prompt "Delete $selected_env?")
  [[ "$confirm" == "Yes" ]] && rm -rf "$ENV_DIR/$selected_env" && echo "üóëÔ∏è Deleted: $selected_env" || echo "‚ùé Cancelled."
}

#--------------------------------------------Function for hotspot----------------------------------
# Hotspot config (persistent across shells)
HOTSPOT_SSID="karthickraghul"
HOTSPOT_PASS="karthi123"
HOTSPOT_IFACE="wlan0"

hotspot() {
  local BAND="bg"  # Default to 2.4GHz
  local CONFIG_FILE="$HOME/.hotspot_config"

  # Load config if exists
  if [[ -f $CONFIG_FILE ]]; then
    source "$CONFIG_FILE"
  fi

  case "$1" in
    -h|--help)
      echo "Usage: hotspot [-on|-off|-5|-2.4|-show-pass|-edit-pass <newpass>|-edit-if <interface>]"
      ;;
    -on)
      shift
      while [[ $# -gt 0 ]]; do
        case "$1" in
          -5) BAND="a"; shift ;;
          -2.4) BAND="bg"; shift ;;
          *) echo "Unknown band option: $1"; return 1 ;;
        esac
      done
      echo "üì° Starting hotspot '$HOTSPOT_SSID' on $HOTSPOT_IFACE ($BAND GHz)..."
      nmcli dev wifi hotspot ifname "$HOTSPOT_IFACE" ssid "$HOTSPOT_SSID" password "$HOTSPOT_PASS" band "$BAND"
      echo "‚úÖ Hotspot '$HOTSPOT_SSID' is ON üöÄ"
      ;;
    -off)
      echo "üõë Stopping hotspot..."
      nmcli connection down Hotspot
      ;;
    -show-pass)
      echo "üîê SSID: $HOTSPOT_SSID"
      echo "üîë Password: $HOTSPOT_PASS"
      echo "üß≠ Interface: $HOTSPOT_IFACE"
      ;;
    -edit-pass)
      if [[ -z "$2" ]]; then
        echo "‚ùå Please provide a new password"
        return 1
      fi
      HOTSPOT_PASS="$2"
      echo "HOTSPOT_PASS=\"$HOTSPOT_PASS\"" > "$CONFIG_FILE"
      echo "HOTSPOT_SSID=\"$HOTSPOT_SSID\"" >> "$CONFIG_FILE"
      echo "HOTSPOT_IFACE=\"$HOTSPOT_IFACE\"" >> "$CONFIG_FILE"
      echo "‚úÖ Password updated"
      ;;
    -edit-if)
      if [[ -z "$2" ]]; then
        echo "‚ùå Please provide a new interface (e.g., wlan0)"
        return 1
      fi
      HOTSPOT_IFACE="$2"
      echo "HOTSPOT_PASS=\"$HOTSPOT_PASS\"" > "$CONFIG_FILE"
      echo "HOTSPOT_SSID=\"$HOTSPOT_SSID\"" >> "$CONFIG_FILE"
      echo "HOTSPOT_IFACE=\"$HOTSPOT_IFACE\"" >> "$CONFIG_FILE"
      echo "‚úÖ Interface updated to $HOTSPOT_IFACE"
      ;;
    *)
      echo "‚ùå Invalid option. Use -h for help."
      ;;
  esac
}
